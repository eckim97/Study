<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="63860004-fae8-438f-96ae-f97cadf46e55" name="Changes" comment="실전 예제 5 - 연관관계 관리&#10;&#10;[글로벌 패치 전략 설정]&#10;- 모든 연관관계를 지연 로딩으로 설정한다.&#10;- @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 지연 로딩으로 변경한다.&#10;&#10;[영속성 전이 설정]&#10;- Order -&gt; Delivery를 영속성 전이 ALL 설정&#10;- Order -&gt; OrderItem을 영속성 전이 ALL 설정">
      <change afterPath="$PROJECT_DIR$/src/main/java/jpabook/jpashop/domain/Address.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/jpabook/jpashop/domain/Delivery.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/jpabook/jpashop/domain/Delivery.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/jpabook/jpashop/domain/Member.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/jpabook/jpashop/domain/Member.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Enum" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;eckim97&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/eckim97/JpaShop.git&quot;,
    &quot;accountId&quot;: &quot;47e4c0d9-0d9c-4265-be80-a0ebc9300149&quot;
  }
}</component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 2
}</component>
  <component name="ProjectId" id="2j7OlKzBXNw7dlvf6qw1ZyBkOUZ" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Application.JpaMain.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;/Users/eunchan/Documents/study/jpashop/src/main/resources/META-INF&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;onboarding.tips.debug.path&quot;: &quot;/Users/eunchan/Documents/study/jpashop/src/main/java/org/example/Main.java&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CreateClassDialog.RecentsKey">
      <recent name="jpabook.jpashop.domain" />
    </key>
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/main/resources/META-INF" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="JpaMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="jpabook.jpashop.JpaMain" />
      <module name="jpashop" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="jpabook.jpashop.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.JpaMain" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-39b83d9b5494-intellij.indexing.shared.core-IU-241.18034.62" />
        <option value="bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-IU-241.18034.62" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="63860004-fae8-438f-96ae-f97cadf46e55" name="Changes" comment="" />
      <created>1720734800578</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1720734800578</updated>
      <workItem from="1720734801644" duration="3590000" />
      <workItem from="1720890752870" duration="3338000" />
      <workItem from="1720960929454" duration="1731000" />
      <workItem from="1721070251022" duration="1098000" />
      <workItem from="1721237706149" duration="2451000" />
    </task>
    <task id="LOCAL-00001" summary="실전 예제 2 - 연관관계 매핑 시작&#10;&#10;- Member와 Order에서 연관관계 주인은 외래키가 있는 Order가 된다.&#10;&#10;- ORDER_ITEM 입장에서는 ORDERS와 ITEM의 외래키를 모두 가지기 때문에 둘 다 설정해 준다.&#10;&#10;- 이렇게 외래키 값을 그대로 가지는 것이 아니라 객체를 가지도록 설계한다.&#10;&#10;- 나중에 필요하면 OrderItem 객체를 조회해서 getOrder, getId로 값을 가져올 수 있다.&#10;&#10;- Member에서 양방향 매핑을 한다.&#10;&#10;- OrderItem과 양방향 매핑을 한다.&#10;&#10;단방향 연관관계만으로도 대부분의 개발을 수행할 수 있다. &#10;&#10;그러나 양방향 연관관계를 사용하는 주된 이유는 개발의 편의성과 JPQL 작성 시 복잡성을 줄이기 위해서이다. &#10;&#10;&#10;&#10;보통은 단방향 연관관계를 주로 사용하고 개발의 편리성을 위해 양방향 연관관계를 사용할 때도 있다고 알아두자.">
      <option name="closed" value="true" />
      <created>1720894112104</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1720894112104</updated>
    </task>
    <task id="LOCAL-00002" summary="실전 예제 4 - 상속관계 매핑&#10;요구사항 추가&#10;&#10;- 상품의 종류는 음반, 도서, 영화가 있고 이후 더 확장될 수 있다.&#10; ㄴ @Inheritance 상속관계 매핑 사용&#10;- 모든 데이터는 등록일과 수정일이 필수다.&#10; ㄴ @MappedSuperclass 사용">
      <option name="closed" value="true" />
      <created>1720986585413</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1720986585413</updated>
    </task>
    <task id="LOCAL-00003" summary="실전 예제 5 - 연관관계 관리&#10;&#10;[글로벌 패치 전략 설정]&#10;- 모든 연관관계를 지연 로딩으로 설정한다.&#10;- @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 지연 로딩으로 변경한다.&#10;&#10;[영속성 전이 설정]&#10;- Order -&gt; Delivery를 영속성 전이 ALL 설정&#10;- Order -&gt; OrderItem을 영속성 전이 ALL 설정">
      <option name="closed" value="true" />
      <created>1721070747760</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1721070747760</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="실전 예제 2 - 연관관계 매핑 시작&#10;&#10;- Member와 Order에서 연관관계 주인은 외래키가 있는 Order가 된다.&#10;&#10;- ORDER_ITEM 입장에서는 ORDERS와 ITEM의 외래키를 모두 가지기 때문에 둘 다 설정해 준다.&#10;&#10;- 이렇게 외래키 값을 그대로 가지는 것이 아니라 객체를 가지도록 설계한다.&#10;&#10;- 나중에 필요하면 OrderItem 객체를 조회해서 getOrder, getId로 값을 가져올 수 있다.&#10;&#10;- Member에서 양방향 매핑을 한다.&#10;&#10;- OrderItem과 양방향 매핑을 한다.&#10;&#10;단방향 연관관계만으로도 대부분의 개발을 수행할 수 있다. &#10;&#10;그러나 양방향 연관관계를 사용하는 주된 이유는 개발의 편의성과 JPQL 작성 시 복잡성을 줄이기 위해서이다. &#10;&#10;&#10;&#10;보통은 단방향 연관관계를 주로 사용하고 개발의 편리성을 위해 양방향 연관관계를 사용할 때도 있다고 알아두자." />
    <MESSAGE value="실전 예제 4 - 상속관계 매핑&#10;요구사항 추가&#10;&#10;- 상품의 종류는 음반, 도서, 영화가 있고 이후 더 확장될 수 있다.&#10; ㄴ @Inheritance 상속관계 매핑 사용&#10;- 모든 데이터는 등록일과 수정일이 필수다.&#10; ㄴ @MappedSuperclass 사용" />
    <MESSAGE value="실전 예제 5 - 연관관계 관리&#10;&#10;[글로벌 패치 전략 설정]&#10;- 모든 연관관계를 지연 로딩으로 설정한다.&#10;- @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 지연 로딩으로 변경한다.&#10;&#10;[영속성 전이 설정]&#10;- Order -&gt; Delivery를 영속성 전이 ALL 설정&#10;- Order -&gt; OrderItem을 영속성 전이 ALL 설정" />
    <option name="LAST_COMMIT_MESSAGE" value="실전 예제 5 - 연관관계 관리&#10;&#10;[글로벌 패치 전략 설정]&#10;- 모든 연관관계를 지연 로딩으로 설정한다.&#10;- @ManyToOne, @OneToOne은 기본이 즉시 로딩이므로 지연 로딩으로 변경한다.&#10;&#10;[영속성 전이 설정]&#10;- Order -&gt; Delivery를 영속성 전이 ALL 설정&#10;- Order -&gt; OrderItem을 영속성 전이 ALL 설정" />
  </component>
  <component name="XDebuggerManager">
    <breakpoint-manager>
      <breakpoints>
        <line-breakpoint enabled="true" type="java-line">
          <url>file://$PROJECT_DIR$/src/main/java/org/example/Main.java</url>
          <line>13</line>
          <option name="timeStamp" value="1" />
        </line-breakpoint>
      </breakpoints>
    </breakpoint-manager>
  </component>
</project>